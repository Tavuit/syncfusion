import { getShapeByType } from 'src/app/utils/constants';
import { PortVisibility } from '@syncfusion/ej2-angular-diagrams';

const instrumentData = [
  {
    id: "instrument",
    title: "Instrument",
    annotation: "Instrument",
    menuId: "instrument",
    toolTip: "Identify an Instrument",
  },
  {
    id: "method",
    title: "Method",
    annotation: "Method",
    menuId: "method",
    toolTip: "Identify a Method",
  },
  {
    id: "inputElement",
    title: "Input Element",
    annotation: "Input Element",
    menuId: "inputElement",
    toolTip: "Identify an Input Element",
  },
  {
    id: "instrumentDerivative",
    title: "Instrument Derivative",
    annotation: "Instrument Derrivative",
    menuId: "derrivative",
    toolTip: "Identify Derrivative of Method",
  },
  {
    id: "methodDerivative",
    title: "Method Derivative",
    annotation: "Method Derivative",
    menuId: "derrivative",
    toolTip: "Identify Derivative of Method",
  },
  {
    id: "derrivative",
    title: "Derrivative",
    annotation: "Derrivative",
    menuId: "derrivative",
    toolTip: "Identify a Derivative",
  },
  {
    id: "naturalElement",
    title: "Natural Element",
    annotation: "Natural Element",
    menuId: "naturalElement",
    toolTip: "Identify a Natural Element",
  },
  {
    id: "exchangeableElement",
    title: "Exchangeable Element",
    annotation: "Exchangeable Element",
    menuId: "exchangableElement",
    toolTip: "Identify an Exchangeable Element",
  },
  {
    id: "instrumentDerivativeFunction",
    title: "Instrument Derivative Function",
    annotation: "Instrument Derivative Function",
    menuId: "derrivative",
    toolTip: "Identify Derivative Function of Instrument",
  },
  {
    id: "methodDerivativeFunction",
    title: "Method Derivative Function",
    annotation: "Method Derivative Function",
    menuId: "derrivative",
    toolTip: "Identify Derivative Funciton of Method",
  },
  {
    id: "methodFunction",
    title: "Method Function",
    annotation: "Method Function",
    menuId: "methodFunction",
    toolTip: "Identify Function of Method",
  },
  {
    id: "instrumentFunction",
    title: "Instrument Function",
    annotation: "Instrument Function",
    menuId: "methodFunction",
    toolTip: "Identify Instrument Function",
  },
  {
    id: "instrumentServiceFunction",
    title: "Instrument Service Function",
    annotation: "Instrument Service Function",
    menuId: "methodFunction",
    toolTip: "Identify Instrument Service Function",
  },
  {
    id: "serviceFunciton",
    title: "Service Function",
    annotation: "Service Function",
    menuId: "methodFunction",
    toolTip: "Identify Service Function",
  },
  {
    id: "methodExecutedFunction",
    title: "Method Executed Funciton",
    annotation: "Method Executed Function",
    menuId: "methodFunction",
    toolTip: "Identify Method Executed Function",
  },
  {
    id: "functionToInstrument",
    title: "Function To Instrument",
    annotation: "Function To Instrument",
    menuId: "methodFunction",
    toolTip: "Identify Function to Instrument",
  },
  {
    id: "functionToMethod",
    title: "Function To Method",
    annotation: "Function To Method",
    menuId: "methodFunction",
    toolTip: "Identify Function to Method",
  },
  {
    id: "naturalElement1",
    title: "Natural Element",
    annotation: "New Shape please",
    toolTip: "Identify an Input Element",
    menuId: "naturalElement",
    type: "Natural",
  },
  {
    id: "inputElements",
    title: "Input Elements",
    annotation: "Input Elements",
    toolTip: "Identify Group Exchange Elements",
    menuId: "inputElement",
    type: "Overlap",
  },
  {
    id: "exchangeElements",
    title: "Exchange Elements",
    annotation: "Exchange Elements",
    toolTip: "Identify Group Exchange Elements",
    menuId: "exchangableElement",
    type: "Overlap",
  },
  {
    id: "emptycontainerinsturment",
    title: "Empty Container",
    annotation: "Empty Container",
    toolTip: "A Container to Add Part To",
    menuId: "emptyContainer",
    type: "squareemptycontainer",
  },
  {
    id: "linkednodeinstrument",
    title: "Linked Node",
    toolTip: "Linked Node",
    menuId: "linkedNode",
    type: "linkednode",
  },
  {
    id: "ne",
    title: "NE",
    annotation: "NE",
    menuId: "naturalElement",
    toolTip: "Identify Natural Element",
  },
  {
    id: "ie",
    title: "IE",
    annotation: "IE",
    menuId: "inputElement",
    toolTip: "Identify Input Element",
  },
  {
    id: "dl/dT",
    title: "dI/dT",
    annotation: "dI/dT",
    menuId: "empty",
    toolTip: "Identify Instrument Derivative",
  },
];

export function getTheoryInstrumentShapes() {
  return instrumentData.map((value) => ({
    ...getShapeByType(value.type, value.id, { title: value.title, tooltip: value.toolTip}, value.annotation)
  }))
}
