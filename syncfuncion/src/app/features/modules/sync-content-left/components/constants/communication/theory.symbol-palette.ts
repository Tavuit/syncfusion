import { getShapeByType } from 'src/app/utils/constants';
import { PortVisibility } from '@syncfusion/ej2-angular-diagrams';

let theoryData = [
  {
    id: "theory",
    title: "Theory",
    annotation: "Theory",
    menuId: "thoery",
    toolTip: "Identify a Theory",
  },
  {
    id: "theorem",
    title: "Theorem",
    annotation: "Theorem",
    menuId: "theorem",
    toolTip: "Identify a Theorem",
  },
  {
    id: "applyTheory",
    title: "Apply Theory",
    annotation: "Apply",
    menuId: "theory",
    toolTip: "Theory Application Theory",
  },
  {
    id: "communicationTheory",
    title: "Communication Theory",
    annotation: "Communication Theory",
    menuId: "theory",
    toolTip: "Identify The Communication Theory",
  },
  {
    id: "informationTheory",
    title: "Information Theory",
    annotation: "Information Theory",
    menuId: "theory",
    toolTip: "Identify a Information Theory",
  },
  {
    id: "instrumentationTheory",
    title: "Instrumentation Theory",
    annotation: "Instrumentation Theory",
    menuId: "theory",
    toolTip: "Identify the Instrumentation Theory",
  },
  {
    id: "educationTheory",
    title: "Education Theory",
    annotation: "Education Theory",
    menuId: "theory",
    toolTip: "Identify The Education Theory",
  },
  {
    id: "powerTheorem",
    title: "Power Theorem",
    annotation: "Power Theorem",
    menuId: "theory",
    toolTip: "Identify The Power Theorem",
  },
  {
    id: "marketingTheory",
    title: "Marketing Theory",
    annotation: "Marketing Theory",
    menuId: "theory",
    toolTip: "Identify The Marketing Theory",
  },
  {
    id: "exchangeSystemTheory",
    title: "Exchange System Theory",
    annotation: "Exchange System Theory",
    menuId: "theory",
    toolTip: "Identify The Exchange System Theory",
  },
  {
    id: "gammingTheory",
    title: "Gamming Theory",
    annotation: "Gamming Theory",
    menuId: "theory",
    toolTip: "Identify Gamming Theory",
  },
  {
    id: "workTheory",
    title: "Work Theory",
    annotation: "Work Theory",
    menuId: "theory",
    toolTip: "Identify The Work Theory",
  },
  {
    id: "reproductionTheory",
    title: "Reproduction Theory",
    annotation: "Reproduction Theory",
    menuId: "theory",
    toolTip: "Identify The Reproduction Theory",
  },
  {
    id: "utilizationTheory",
    title: "Utilization Theory",
    annotation: "Utilizatin Theory",
    menuId: "theory",
    toolTip: "Identify Our Utilization Theory",
  },
  {
    id: "theorem#",
    title: "Theorem #",
    annotation: "Theorem #",
    menuId: "theorem",
    toolTip: "Identify a Theorem",
  },
  {
    id: "communicationTheory1",
    title: "Communication Theory",
    annotation: "Kt",
    menuId: "theory",
    toolTip: "Identify The Communication Theory",
  },
  {
    id: "interpretationFunction",
    title: "Interpretation Function",
    annotation: "Interpret",
    menuId: "empty",
    toolTip: "Identify The Interpretation Function",
  },
  {
    id: "interpretationFunction1",
    title: "Interpretation Funciton",
    annotation: "Int{ }",
    menuId: "empty",
    toolTip: "Identify The Interpretation Function",
  },
  {
    id: "applyTheory1",
    title: "Apply Theory",
    annotation: "Tr{ }",
    menuId: "theory",
    toolTip: "Theory Application Function",
  },
  {
    id: "presentedTheory",
    title: "Presented Theory",
    annotation: "Presented Theory",
    menuId: "theory",
    toolTip: "Identify a Presented Theory",
  },
  {
    id: "interpretedTheory",
    title: "Interpreted Theory",
    annotation: "Interpreted Theory",
    menuId: "theory",
    toolTip: "Identify an Interpreted Thoery",
  },
  {
    id: "presentedTheory1",
    title: "Presented Theory",
    annotation: "A'",
    menuId: "theory",
    toolTip: "Identify a Presented Theory",
  },
  {
    id: "interpretedTheory1",
    title: "Interpreted Theory",
    annotation: "A",
    menuId: "theory",
    toolTip: "Identify an Intepreted Thoery",
  },
  {
    id: "reference",
    title: "Reference",
    annotation: "Need new Shape",
    menuId: "reference",
    toolTip: "Identify The Given Reference",
    type: "Reference",
  },
  {
    id: "reference1",
    title: "Reference",
    annotation: "Need new Shape",
    menuId: "reference",
    toolTip: "Identify The Given Reference",
    type: "Reference1",
  },
  {
    id: "characteristicsTh",
    title: "Characteristics",
    annotation: "Theory Characteristics",
    menuId: "theoryCharacteristic",
    toolTip: "Characteristic of Theory",
  },
  {
    id: "groupTheoryVertical",
    title: "Group",
    annotation: {
      content: [
        {
          content: "Group",
        },
      ],
      ports: [
        {
          id: "left-1",
          offset: {x: 0, y: 0.25},
          visibility: PortVisibility.Visible,
          shape: "X",
          width: 4,
          height: 4,
        },
        {
          id: "left-2",
          offset: {x: 0, y: 0.75},
          visibility: PortVisibility.Visible,
          shape: "X",
          width: 4,
          height: 4,
        },
        {
          id: "right",
          offset: {x: 1, y: 0.5},
          visibility: PortVisibility.Visible,
          shape: "X",
          width: 4,
          height: 4,
        },
      ],
      height: 75,
      width: 50,
    },
    menuId: "commMix",
    toolTip: "Use to Group or Add Entities",
  },
  {
    id: "continuity1",
    title: "Continuity",
    annotation: {
      strokeWidth: "0",
      fill: "transparent",
      ports: [],
    },
    toolTip: "Show Continuity of Entity",
    menuId: "empty",
    type: "Continuity",
  },
  {
    id: "linkednodeTH",
    title: "Linked Node",
    toolTip: "Linked Node",
    menuId: "linkedNode",
    type: "linkednode",
  },
  {
    id: "t",
    title: "T",
    menuId: "theory",
    annotation: "T",
    toolTip: "Identify a Theory",
  },
  {
    id: "th[n]",
    title: "Th[n]",
    annotation: "Thn",
    menuId: "theorem",
    toolTip: "Identify a Theorem",
  },
  {
    id: "uT",
    title: "UT",
    annotation: "UT",
    menuId: "theory",
    toolTip: "Identify Our Utilization Theory",
  },
];

export function getTheoryShapes() {
  return theoryData.map((value) => ({
    ...getShapeByType(value.type, value.id, { title: value.title, tooltip: value.toolTip}, value.annotation)
  }))
}
